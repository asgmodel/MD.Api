// <auto-generated />
using System;
using Api.SM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MD.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.SM.Models.CardModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SexType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("CardModels");
                });

            modelBuilder.Entity("Api.SM.Models.ModulModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RowModelId");

                    b.HasIndex("SchoolModelId");

                    b.ToTable("ModulModel");
                });

            modelBuilder.Entity("Api.SM.Models.NameModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NameModels");
                });

            modelBuilder.Entity("Api.SM.Models.RowModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("RowModels");
                });

            modelBuilder.Entity("Api.SM.Models.SchoolModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SchoolModel");
                });

            modelBuilder.Entity("Api.SM.Models.StudentModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("RowId");

                    b.HasIndex("SchoolId");

                    b.ToTable("StudentModel");
                });

            modelBuilder.Entity("Api.SM.Models.TeacherModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("TeacherModel");
                });

            modelBuilder.Entity("ModulModelStudentModel", b =>
                {
                    b.Property<string>("ModulsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ModulsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ModulModelStudentModel");
                });

            modelBuilder.Entity("ModulModelTeacherModel", b =>
                {
                    b.Property<string>("ModulsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ModulsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("ModulModelTeacherModel");
                });

            modelBuilder.Entity("SchoolModelTeacherModel", b =>
                {
                    b.Property<string>("SchoolsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SchoolsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SchoolModelTeacherModel");
                });

            modelBuilder.Entity("StudentModelTeacherModel", b =>
                {
                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("StudentModelTeacherModel");
                });

            modelBuilder.Entity("Api.SM.Models.CardModel", b =>
                {
                    b.HasOne("Api.SM.Models.NameModel", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Api.SM.Models.ModulModel", b =>
                {
                    b.HasOne("Api.SM.Models.RowModel", null)
                        .WithMany("Moduls")
                        .HasForeignKey("RowModelId");

                    b.HasOne("Api.SM.Models.SchoolModel", null)
                        .WithMany("Moduls")
                        .HasForeignKey("SchoolModelId");
                });

            modelBuilder.Entity("Api.SM.Models.RowModel", b =>
                {
                    b.HasOne("Api.SM.Models.SchoolModel", "School")
                        .WithMany("Rows")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Api.SM.Models.StudentModel", b =>
                {
                    b.HasOne("Api.SM.Models.CardModel", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Api.SM.Models.RowModel", "Row")
                        .WithMany("Students")
                        .HasForeignKey("RowId");

                    b.HasOne("Api.SM.Models.SchoolModel", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Card");

                    b.Navigation("Row");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Api.SM.Models.TeacherModel", b =>
                {
                    b.HasOne("Api.SM.Models.RowModel", "Row")
                        .WithMany("Teachers")
                        .HasForeignKey("RowId");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ModulModelStudentModel", b =>
                {
                    b.HasOne("Api.SM.Models.ModulModel", null)
                        .WithMany()
                        .HasForeignKey("ModulsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.SM.Models.StudentModel", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModulModelTeacherModel", b =>
                {
                    b.HasOne("Api.SM.Models.ModulModel", null)
                        .WithMany()
                        .HasForeignKey("ModulsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.SM.Models.TeacherModel", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolModelTeacherModel", b =>
                {
                    b.HasOne("Api.SM.Models.SchoolModel", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.SM.Models.TeacherModel", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentModelTeacherModel", b =>
                {
                    b.HasOne("Api.SM.Models.StudentModel", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.SM.Models.TeacherModel", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.SM.Models.RowModel", b =>
                {
                    b.Navigation("Moduls");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Api.SM.Models.SchoolModel", b =>
                {
                    b.Navigation("Moduls");

                    b.Navigation("Rows");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
